// src/lib/taskMonitor.js
import { google } from 'googleapis';
import { initializeDatabase } from '../db/database.js';
import { initializeSheetsAPI } from './sheetsAPI.js';
import { getAllActiveGiveaways, getAllScheduledGiveaways, getMonitors, cacheDB } from './settingsCache.js';
import { EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } from 'discord.js';

async function checkCalendarEvents(client) {
    const monitors = await getMonitors();
    if (monitors.length === 0) return;
    try {
        const { auth } = await initializeSheetsAPI();
        const calendar = google.calendar({ version: 'v3', auth });
        const pool = await initializeDatabase();
        await pool.query("DELETE FROM notified_events WHERE notified_at < NOW() - INTERVAL '6 hours'");
        const timeMin = new Date().toISOString();
        const timeMax = new Date(Date.now() + 10 * 60 * 1000).toISOString();

        for (const monitor of monitors) {
            try {
                const events = await calendar.events.list({
                    calendarId: monitor.calendar_id, timeMin, timeMax, singleEvents: true, orderBy: 'startTime', timeZone: 'Asia/Tokyo'
                });
                if (!events.data.items) continue;
                for (const event of events.data.items) {
                    const notifiedCheck = await pool.query('SELECT 1 FROM notified_events WHERE event_id = $1', [event.id]);
                    if (notifiedCheck.rows.length > 0) continue;

                    const eventText = `${event.summary || ''} ${event.description || ''}`;
                    
                    // --- „Ç´„É¨„É≥„ÉÄ„ÉºÈÄ£Êê∫ÊäΩÈÅ∏„ÅÆËá™Âãï‰ΩúÊàê ---
                    if (eventText.includes('„Äê„É©„Ç≠„Ç∑„Éß„Äë')) {
                        await pool.query('INSERT INTO notified_events (event_id) VALUES ($1) ON CONFLICT (event_id) DO NOTHING', [event.id]);
                        console.log(`[TaskMonitor] ÊäΩÈÅ∏„Ç§„Éô„É≥„Éà„ÇíÊ§úÂá∫: ${event.summary}`);
                        try {
                            const descriptionLines = (event.description || '').split('\n').map(line => line.trim()).filter(line => line.length > 0);
                            let prizesToCreate = [];
                            let additionalMessageContent = [];
                            let allMentionsForSeparatePost = new Set();

                            for (const line of descriptionLines) {
                                const prizeMatch = line.match(/^„Äê(.+)\/(\d+)„Äë$/);
                                if (prizeMatch) {
                                    prizesToCreate.push({
                                        prize: prizeMatch[1].trim(),
                                        winnerCount: parseInt(prizeMatch[2], 10)
                                    });
                                } else {
                                    const mentionMatches = line.match(/<@&[0-9]+>|<@[0-9]+>|<@everyone>|<@here>/g);
                                    if (mentionMatches) {
                                        mentionMatches.forEach(m => allMentionsForSeparatePost.add(m));
                                        let cleanedLine = line.replace(/<@&[0-9]+>|<@[0-9]+>|<@everyone>|<@here>/g, '').trim();
                                        if (cleanedLine) additionalMessageContent.push(cleanedLine);
                                    } else {
                                        additionalMessageContent.push(line);
                                    }
                                }
                            }

                            let mainSummaryPrize = (event.summary || '„Éó„É¨„Çº„É≥„Éà').replace('„Äê„É©„Ç≠„Ç∑„Éß„Äë', '').trim();
                            if (mainSummaryPrize && prizesToCreate.length === 0) {
                                prizesToCreate.push({ prize: mainSummaryPrize, winnerCount: 1 });
                            } else if (prizesToCreate.length === 0) {
                                prizesToCreate.push({ prize: 'Á¥†Êïµ„Å™„Éó„É¨„Çº„É≥„Éà', winnerCount: 1 });
                            }
                            
                            const startTime = new Date(event.start.dateTime || event.start.date);
                            const endTime = new Date(event.end.dateTime || event.end.date);
                            
                            if (monitor.mention_role) allMentionsForSeparatePost.add(`<@&${monitor.mention_role}>`);
                            const finalMentionsForSeparatePost = Array.from(allMentionsForSeparatePost).join(' ').trim();
                            const finalAdditionalMessageText = additionalMessageContent.join('\n').trim();

                            const giveawayChannel = await client.channels.fetch(monitor.channel_id).catch(() => null);
                            if (giveawayChannel) {
                                for (const prizeInfo of prizesToCreate) {
                                    const giveawayEmbed = new EmbedBuilder()
                                        .setTitle(`üéâ ÊôØÂìÅ: ${prizeInfo.prize}`)
                                        .setDescription(`„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÊäº„Åó„Å¶ÂèÇÂä†„Åó„Çà„ÅÜÔºÅ\n**ÁµÇ‰∫ÜÊó•ÊôÇ: <t:${Math.floor(endTime.getTime() / 1000)}:F>**`)
                                        .addFields({ name: 'ÂΩìÈÅ∏ËÄÖÊï∞', value: `${prizeInfo.winnerCount}Âêç`, inline: true })
                                        .setColor(0x5865F2)
                                        .setTimestamp(endTime);

                                    const participateButton = new ButtonBuilder().setCustomId('giveaway_participate').setLabel('ÂèÇÂä†„Åô„Çã').setStyle(ButtonStyle.Primary).setEmoji('üéâ');
                                    const row = new ActionRowBuilder().addComponents(participateButton);
                                    
                                    const message = await giveawayChannel.send({ embeds: [giveawayEmbed], components: [row] });
                                    
                                    giveawayEmbed.setFooter({ text: `„É°„ÉÉ„Çª„Éº„Ç∏ID: ${message.id}` });
                                    await message.edit({ embeds: [giveawayEmbed], components: [row] });

                                    const sql = 'INSERT INTO giveaways (message_id, guild_id, channel_id, prize, winner_count, end_time) VALUES ($1, $2, $3, $4, $5, $6)';
                                    await cacheDB.query(sql, [message.id, monitor.guild_id, giveawayChannel.id, prizeInfo.prize, prizeInfo.winnerCount, endTime]);
                                    console.log(`„Ç´„É¨„É≥„ÉÄ„Éº„Åã„ÇâËá™Âãï‰ΩúÊàê„Åï„Çå„ÅüÊäΩÈÅ∏„Äå${prizeInfo.prize}„Äç„Åå„ÉÅ„É£„É≥„Éç„É´ ${giveawayChannel.id} „ÅßÈñãÂßã„Åï„Çå„Åæ„Åó„Åü„ÄÇ`);
                                }

                                if (finalAdditionalMessageText || finalMentionsForSeparatePost) {
                                    let combinedPostContent = '';
                                    if (finalMentionsForSeparatePost) {
                                        combinedPostContent += finalMentionsForSeparatePost;
                                    }
                                    if (finalAdditionalMessageText) {
                                        if (combinedPostContent) combinedPostContent += '\n';
                                        combinedPostContent += finalAdditionalMessageText;
                                    }
                                    await giveawayChannel.send(combinedPostContent);
                                    console.log(`„Ç´„É¨„É≥„ÉÄ„Éº„Ç§„Éô„É≥„Éà„Åã„Çâ„ÅÆËøΩÂä†„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÉÅ„É£„É≥„Éç„É´ ${giveawayChannel.id} „Å´ÊäïÁ®ø„Åó„Åæ„Åó„Åü„ÄÇ`);
                                }
                            }
                        } catch (e) { console.error(`„Ç´„É¨„É≥„ÉÄ„Éº„Ç§„Éô„É≥„Éà ${event.id} „Åã„Çâ„ÅÆËá™ÂãïÊäΩÈÅ∏‰ΩúÊàê„Å´Â§±Êïó:`, e); }
                        continue;
                    }

                    // --- ÈÄöÂ∏∏„ÅÆ„Ç´„É¨„É≥„ÉÄ„ÉºÈÄöÁü• ---
                    if (eventText.includes(`„Äê${monitor.trigger_keyword}„Äë`)) {
                        await pool.query('INSERT INTO notified_events (event_id) VALUES ($1) ON CONFLICT (event_id) DO NOTHING', [event.id]);
                        const channel = await client.channels.fetch(monitor.channel_id).catch(() => null);
                        if (!channel) continue;
                        let allMentions = new Set();
                        if (monitor.mention_role) allMentions.add(`<@&${monitor.mention_role}>`);
                        let cleanedDescription = event.description || '';
                        const mentionMatches = cleanedDescription.match(/<@&[0-9]+>|<@[0-9]+>|<@everyone>|<@here>/g);
                        if (mentionMatches) {
                            mentionMatches.forEach(m => allMentions.add(m));
                            cleanedDescription = cleanedDescription.replace(/<@&[0-9]+>|<@[0-9]+>|<@everyone>|<@here>/g, '').trim();
                        }
                        const finalMentions = Array.from(allMentions).join(' ');
                        let message = `**${event.summary || '„Çø„Ç§„Éà„É´„Å™„Åó'}**`;
                        if (cleanedDescription) message += `\n${cleanedDescription}`;
                        if (finalMentions.trim()) message += `\n\n${finalMentions.trim()}`;
                        await channel.send(message);
                    }
                }
            } catch (calError) { console.error(`„Ç´„É¨„É≥„ÉÄ„Éº(ID: ${monitor.calendar_id})„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº:`, calError.message); }
        }
    } catch (error) { console.error('[TaskMonitor] „Ç´„É¨„É≥„ÉÄ„Éº„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠„Å´‰∫àÊúü„Åõ„Å¨„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error); }
}

async function checkFinishedGiveaways(client) {
    const now = new Date();
    const activeGiveaways = getAllActiveGiveaways();
    const finishedGiveaways = activeGiveaways.filter(g => new Date(g.end_time) <= now);
    if (finishedGiveaways.length === 0) return;
    for (const giveaway of finishedGiveaways) {
        try {
            const channel = await client.channels.fetch(giveaway.channel_id).catch(() => null);
            if (!channel) { await cacheDB.query("UPDATE giveaways SET status = 'ERRORED' WHERE message_id = $1", [giveaway.message_id]); continue; }
            const message = await channel.messages.fetch(giveaway.message_id).catch(() => null);
            if (!message) { await cacheDB.query("UPDATE giveaways SET status = 'ERRORED' WHERE message_id = $1", [giveaway.message_id]); continue; }
            
            const participantsResult = await cacheDB.query("SELECT participants FROM giveaways WHERE message_id = $1", [giveaway.message_id]);
            const participants = participantsResult.rows[0]?.participants || [];
            
            let winners = [];
            if (participants.length > 0) {
                const shuffled = [...participants].sort(() => 0.5 - Math.random());
                winners = shuffled.slice(0, giveaway.winner_count);
            }
            
            const winnerMentions = winners.map(id => `<@${id}>`).join(' ');
            const resultEmbed = new EmbedBuilder().setTitle(`üéâ ÊäΩÈÅ∏ÁµÇ‰∫Ü: ${giveaway.prize}`).setColor(0x2ECC71).setTimestamp(new Date(giveaway.end_time));
            if (winners.length > 0) {
                resultEmbed.setDescription(`**ÂΩìÈÅ∏ËÄÖ:**\n${winnerMentions}\n\n„Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅüéâ`);
            } else {
                resultEmbed.setDescription('ÂèÇÂä†ËÄÖ„Åå„ÅÑ„Å™„Åã„Å£„Åü„Åü„ÇÅ„ÄÅÂΩìÈÅ∏ËÄÖ„ÅØ„ÅÑ„Åæ„Åõ„Çì„ÄÇ');
            }
            await channel.send({ content: winnerMentions, embeds: [resultEmbed] });
            const endedEmbed = EmbedBuilder.from(message.embeds[0]).setDescription(`**ÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü**\nÂèÇÂä†ËÄÖ: ${participants.length}Âêç\nÂΩìÈÅ∏ËÄÖ: ${winnerMentions || '„Å™„Åó'}`).setColor(0x95A5A6);
            await message.edit({ embeds: [endedEmbed], components: [] });
            await cacheDB.query("UPDATE giveaways SET status = 'ENDED', winners = $1 WHERE message_id = $2", [winners, giveaway.message_id]);
            console.log(`ÊäΩÈÅ∏„Äå${giveaway.prize}„Äç„ÅåÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇÂΩìÈÅ∏ËÄÖ„ÅåÁô∫Ë°®„Åï„Çå„Åæ„Åó„Åü„ÄÇ`);
        } catch (error) {
            console.error(`ÊäΩÈÅ∏ ${giveaway.message_id} „ÅÆÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº:`, error);
            await cacheDB.query("UPDATE giveaways SET status = 'ERRORED' WHERE message_id = $1", [giveaway.message_id]);
        }
    }
}

async function checkScheduledGiveaways(client) {
    const now = new Date();
    const scheduledGiveaways = getAllScheduledGiveaways();
    
    const dueOneTime = scheduledGiveaways.filter(g => new Date(g.start_time) <= now); 

    for (const scheduled of dueOneTime) {
        try {
            const channel = await client.channels.fetch(scheduled.giveaway_channel_id).catch(() => null);
            if (!channel) { await cacheDB.query('DELETE FROM scheduled_giveaways WHERE id = $1', [scheduled.id]); continue; }
            let endTime;
            if (scheduled.end_time) {
                endTime = new Date(scheduled.end_time);
            } else {
                endTime = new Date(Date.now() + scheduled.duration_hours * 60 * 60 * 1000);
            }
            const giveawayEmbed = new EmbedBuilder().setTitle(`üéâ ÊôØÂìÅ: ${scheduled.prize}`).setDescription(`„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÊäº„Åó„Å¶ÂèÇÂä†„Åó„Çà„ÅÜÔºÅ\n**ÁµÇ‰∫ÜÊó•ÊôÇ: <t:${Math.floor(endTime.getTime() / 1000)}:F>**`).addFields({ name: 'ÂΩìÈÅ∏ËÄÖÊï∞', value: `${scheduled.winner_count}Âêç`, inline: true }).setColor(0x5865F2).setTimestamp(endTime);
            const participateButton = new ButtonBuilder().setCustomId('giveaway_participate').setLabel('ÂèÇÂä†„Åô„Çã').setStyle(ButtonStyle.Primary).setEmoji('üéâ');
            const row = new ActionRowBuilder().addComponents(participateButton);
            const message = await channel.send({ embeds: [giveawayEmbed], components: [row] });
            
            giveawayEmbed.setFooter({ text: `„É°„ÉÉ„Çª„Éº„Ç∏ID: ${message.id}` });
            await message.edit({ embeds: [giveawayEmbed], components: [row] });

            const sql = 'INSERT INTO giveaways (message_id, guild_id, channel_id, prize, winner_count, end_time) VALUES ($1, $2, $3, $4, $5, $6)';
            await cacheDB.query(sql, [message.id, scheduled.guild_id, channel.id, scheduled.prize, scheduled.winner_count, endTime]);
            await cacheDB.query('DELETE FROM scheduled_giveaways WHERE id = $1', [scheduled.id]);
            console.log(`‰∫àÁ¥Ñ„Åï„Çå„ÅüÊäΩÈÅ∏„Äå${scheduled.prize}„Äç„Åå„ÉÅ„É£„É≥„Éç„É´ ${channel.id} „ÅßÈñãÂßã„Åï„Çå„Åæ„Åó„Åü„ÄÇ`);
        } catch (error) { console.error(`‰∫àÁ¥Ñ„Åï„Çå„ÅüÊäΩÈÅ∏ ${scheduled.id} „ÅÆÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº:`, error); }
    }
}

let isRunning = false;
async function runTasks(client) {
    if (isRunning) return;
    isRunning = true;
    try {
        await checkCalendarEvents(client);
        await checkFinishedGiveaways(client);
        await checkScheduledGiveaways(client);
    } catch (error) { console.error('[TaskMonitor] „É°„Ç§„É≥„Çø„Çπ„ÇØ„É´„Éº„Éó‰∏≠„Å´‰∫àÊúü„Åõ„Å¨„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error); }
    finally { isRunning = false; }
}

export function startMonitoring(client) {
    const MONITOR_INTERVAL_MINUTES = 10;
    const scheduleNextRun = () => {
        const now = new Date();
        const minutes = now.getMinutes();
        const nextRunMinute = (Math.floor(minutes / MONITOR_INTERVAL_MINUTES) + 1) * MONITOR_INTERVAL_MINUTES;
        const nextRunTime = new Date(now);
        nextRunTime.setMinutes(nextRunMinute, 0, 0);
        const delay = nextRunTime.getTime() - now.getTime();
        setTimeout(() => {
            const runAndSchedule = () => runTasks(client);
            runAndSchedule();
            setInterval(runAndSchedule, MONITOR_INTERVAL_MINUTES * 60 * 1000);
        }, delay);
    };
    scheduleNextRun();
    console.log('‚úÖ „Éû„Çπ„Çø„Éº„Çø„Çπ„ÇØÁõ£Ë¶ñ„Çµ„Éº„Éì„Çπ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü„ÄÇ');
}